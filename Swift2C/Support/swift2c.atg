/**********************************************************
**   SWIFT2C.ATG
**   Coco/R Swift to C Translator
**   by Michael Griebling
**********************************************************/

COMPILER Swift2C
/* Swift2C translator */

public var tab : SymbolTable!
public var gen : CodeGenerator!

func evalConstants(_ obj: Obj, _ op: Op, _ obj2: Obj) -> Obj {
    if obj.kind == .constant && obj2.kind == .constant {
        return tab.BinExpr(obj, op, obj2)
    } else {
        gen.Emit(obj, op, obj2); return obj
    }
}

func evalConstants(_ op: Op, _ obj: Obj) -> Obj {
    if obj.kind == .constant {
        return tab.UnaryExpr(op, obj)
    } else {
        gen.Emit(op, obj); return obj
    }
}

/*--------------------------------------------------------------------------*/

CHARACTERS
  letter         = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  binDigit       = "01" .
  octDigit       = '0'..'7' .
  digit          = '0'..'9' .
  hexDigit       = digit + 'A'..'F' + 'a'..'f' .
  binDigitRepeat = binDigit + '_' .
  octDigitRepeat = octDigit + '_' .
  digitRepeat    = digit + '_' .
  hexDigitRepeat = hexDigit + '_' .
  exponent       = 'E' + 'e' .
  hexExp         = 'P' + 'p' .
  sign           = "+-" .
  printable      = '\u0020' .. '\u007e' .
  cr             = '\r' .
  lf             = '\n' .
  ff             = '\f' .
  tab            = '\t' .
  vt             = '\v' .
  stringCh       = ANY - '"' - '\\' - cr - lf .
  charCh         = ANY - '\'' - '\\' - cr - lf .

TOKENS
  ident       = (letter | '_') {letter | digit} .
  hexNumber   = "0x" hexDigit { hexDigitRepeat } '.' hexDigit { hexDigitRepeat } [ hexExp [ sign ] digit { digitRepeat } ] .
  decNumber   = digit { digitRepeat } '.' digit { digitRepeat } [ exponent [ sign ] digit { digitRepeat } ] .
  octalInt    = "0o" octDigit { octDigitRepeat } .
  hexInt      = "0x" hexDigit { hexDigitRepeat } .
  binInt      = "0b" binDigit { binDigitRepeat } .
  decInt      = digit { digitRepeat } .
  string      = '"' { stringCh | '\\' printable } '"' .
  char        = '\'' ( charCh | '\\' printable { hexDigit } ) '\'' .

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + ff + vt + tab

PRODUCTIONS
  Swift2C                                (. var name = "" .)
  =
    "class" ident                        (. name = t.val; tab.OpenScope(name); gen.Emit("#include \"\(name).h\""); gen.Ln() .)
    '{'
        { VarDecl                        (. gen.Ln() .)
            [';'] |
          ProcDecl                       (. gen.Ln() .)
        }
    '}'                                  (. tab.CloseScope(); gen.Ln()
                                            /* if gen.progStart == -1 { SemErr("main function never defined") } */
                                          .)
    .

  ProcDecl                              (. var name = ""; var mod = "" .)
    = "func"
       ident                            (. name = t.val; _ = tab.NewObj(name, .proc, .undef)
                                           if name == "Main" { /* TBD */ }
                                           mod = tab.topScope?.name ?? ""
                                           tab.OpenScope(name)
                                           gen.Emit("func \(mod)_\(name)").)
      '(' ')'                           (. gen.Emit("(void)") .)
         CodeBlock
                                        (. .)
        .

  Type<_ type: inout OType>
    =                                    (. type = .undef .)
    ( "Int"                              (. type = .integer(0) .)
    | "Bool"                             (. type = .boolean(false) .)
    | "Double"                           (. type = .double(0) .)
    | "String"                           (. type = .string("") .)
    | "Character"                        (. type = .character("\0") .)
    | "Any"                              (. type = .any(0) .)
    ) .

  VarDecl                                (. var obj: Obj! = nil; var name = ""; var type = OType.undef; var kind = OKind.variable .)
    = ("var"
        |
       "let"                             (. kind = .constant; gen.Emit("const ") .)
       )
      ident                              (. name = t.val .)
      ':' Type<&type>                    (. obj = tab.NewObj(name, kind, type)
                                            gen.Emit(type: obj.type); gen.Emit(obj); gen.Emit(";"); gen.Ln() .)
    .

  IfStat
    =                                    (. var obj: Obj! = nil .)
    "if"                                 (. gen.Emit("if (") .)
      Expr<&obj>
                                         (. gen.Emit(")") .)
      CodeBlock
    { "else"
      ( "if"                             (. gen.Emit("else if (") .)
         Expr<&obj>
                                         (. gen.Emit(")") .)
         CodeBlock
       |                                 (. gen.Emit("else") .)
         CodeBlock
      )
    }
    .

  WhileStat
    =                                    (. var obj: Obj! = nil .)
    "while"                              (. gen.Emit("while (") .)
        Expr<&obj>
                                         (. gen.Emit(")") .)
        CodeBlock
    .

  RepeatStat
    =                                    (. var obj: Obj! = nil .)
    "repeat"                             (. gen.Emit("do") .)
        CodeBlock
    "while"                              (. gen.Emit("while (") .)
        Expr<&obj>
                                         (. gen.Emit(")") .)
    .

  Pattern
    =                                    (. var obj: Obj! = nil .)
        Expr<&obj>
    .

  CaseLabel
    =
    (   "case"                           (. gen.Emit("case") .)
           Pattern
      | "default"                        (. gen.Emit("default") .)
    ) ':'                                (. gen.Emit(":") .)
    .

  SwitchCase
    =
    CaseLabel Statements
    .

  SwitchStat
    =                                    (. var obj : Obj? = nil .)
    "switch"                             (. gen.Emit("switch") .)
        Expr<&obj>
    '{'                                  (. gen.Emit(" {") .)
        { SwitchCase }
    '}'                                  (. gen.Emit("}") .)
    .

  Stat                                   (. var obj2 : Obj!; var obj: Obj! .)
    =
      ident                              (. obj = tab.Find(t.val); gen.Emit(obj) .)
      ( "="                              (. if obj.kind != .variable { SemErr("cannot assign to procedure") }
                                            gen.Emit(" = ")  .)
        Expr<&obj2>                      (. if obj2.type != obj.type { SemErr("incompatible types") }
                                            gen.Emit(obj2); gen.Emit(";"); gen.Ln() .)
     | '(' ')'                           (. if obj.kind != .proc { SemErr("object is not a procedure") }
                                            gen.Emit("()") .)
      )
    | IfStat
    | WhileStat
    | RepeatStat
    | SwitchStat
    | VarDecl
    .

  Statements =
    { Stat [';'] }
    .

  CodeBlock =
    '{'                                  (. gen.Emit(" {"); gen.Ln() .)
    Statements
    '}'                                  (. gen.Emit("}"); gen.Ln() .)
    .

  Expr<_ obj: inout Obj!>                (. var obj2: Obj! = nil; var op = Op.UNDEF .)
    =
    SimExpr<&obj>
    [ RelOp<&op>
      SimExpr<&obj2>                     (. obj = evalConstants(obj, op, obj2) .)
    ].

  SimExpr<_ obj: inout Obj!>             (. var obj2: Obj! = nil; var op = Op.UNDEF .)
    =
    Term<&obj>
    { AddOp<&op>
      Term<&obj2>                        (. obj = evalConstants(obj, op, obj2) .)
    }.

  Term<_ obj: inout Obj!>                (. var obj2: Obj! = nil; var op = Op.UNDEF .)
  =
    Factor<&obj>
    { MulOp<&op>
      Factor<&obj2>                      (. obj = evalConstants(obj, op, obj2) .)
    }.

  Factor<_ obj: inout Obj!>
    =                                    (. obj = nil .)
    ( ident                              (. obj = tab.Find(t.val) .)
    | "true"                             (. obj = tab.BoolCon(true) .)
    | "false"                            (. obj = tab.BoolCon(false) .)
    | decInt                             (. obj = tab.IntCon(t.val, 10) .)
    | binInt                             (. obj = tab.IntCon(t.val, 2) .)
    | hexInt                             (. obj = tab.IntCon(t.val, 16) .)
    | octalInt                           (. obj = tab.IntCon(t.val, 8) .)
    | hexNumber                          (. obj = tab.DoubleCon(t.val, 16) .)
    | decNumber                          (. obj = tab.DoubleCon(t.val) .)
    | char                               (. obj = tab.CharCon(t.val) .)
    | string                             (. obj = tab.StringCon(t.val) .)
    | "-" Factor<&obj>                   (. obj = evalConstants( .NEG, obj) .)
    | "!" Factor<&obj>                   (. obj = evalConstants( .NOT, obj) .)
    | "("                                (. obj = nil .)
         [Expr<&obj>]
      ")"
    ).

  MulOp<_ op: inout Op>
  =                                      (. op = .MUL .)
    ( "*"
    | "/"                                (. op = .DIV .)
    | "%"                                (. op = .REM .)
    | "&"                                (. op = .AND .)
    ).

  AddOp<_ op: inout Op>
  =                                      (. op = .ADD .)
    ( "+"
    | "-"                                (. op = .SUB .)
    | "|"                                (. op = .OR .)
    ).

  RelOp<_ op: inout Op>
  =                                      (. op = .EQU .)
    ( "=="
    | "<"                                (. op = .LSS .)
    | ">"                                (. op = .GTR .)
    | ">="                               (. op = .GTE .)
    | "<="                               (. op = .LTE .)
    | "!="                               (. op = .NEQ .)
    ).

END Swift2C.


